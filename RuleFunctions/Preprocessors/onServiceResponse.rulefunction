/**
 * @description upon receipt of a service response, get a lock, and fetch its handler, so its state-machine can handle the response.
 */
void rulefunction RuleFunctions.Preprocessors.onServiceResponse {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.ServiceResponse evt;
	}
	body {
		Object logger = Log.getLogger("RuleFunctions.Preprocessors.onServiceResponse");
		if (evt.correlationId == null || String.trim(evt.correlationId) == "") {
			Log.log(logger, "info", "Ignore service response: No correlation ID for response '%s'", evt.response);
			Event.consumeEvent(evt);
			return;
		}
		
		long startTime = System.currentTimeMillis();
		
		// update performance stats if engine is configured for PrintStats
		int printStats = System.getGlobalVariableAsInt("Agent/PrintStats", 0);
		if (printStats > 0) {
			Stats.addStat("ServiceResponseDelay", startTime - evt.responseTime);
			Stats.setLastEventTime();
		}
		
		boolean lockLocal = System.getGlobalVariableAsBoolean("Agent/LockLocal", true);
		if (!lockLocal) {
			// if configured to use non-local lock, load handler from cache
			RuleFunctions.fetchHandlerFromCache(evt);
			return;
		}
		
		// this is in-memory deployment. acquire local lock on correlation ID
		long lockWait = System.getGlobalVariableAsLong("Agent/LockWait", 50);
		int lockRetry = System.getGlobalVariableAsInt("Agent/LockRetry", 3);
		boolean locked = RuleFunctions.acquireLock(evt.correlationId, lockWait, lockRetry, lockLocal);
		if (!locked) {
			Log.log(logger, "info", "Ignore service response: Failed lock on '%s'", evt.correlationId);
			Event.consumeEvent(evt);
			return;
		}
		long lockTime = System.currentTimeMillis();
		Stats.addStat("AcquireHandlerLock", lockTime - startTime);
		
		// fetch collector into working memory
		Concepts.Handler h = Instance.getByExtIdByUri(evt.correlationId, "/Concepts/Handler");
		Stats.addStat("RetrieveHandler", System.currentTimeMillis() - lockTime);
		if (h == null) {
			// when running multiple in-memory instances, only one instance will have the valid handler
			Log.log(logger, "info", "Ignore service response: Failed to load locked handler '%s'", evt.correlationId);
			Event.consumeEvent(evt);
			return;
		}
		Log.log(logger, "info", "Loaded locked handler '%s'", h@extId);
	}
}