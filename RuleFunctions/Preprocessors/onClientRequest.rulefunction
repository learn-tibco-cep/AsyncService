/**
 * @description upon receipt of client request, create a handler, and send a service request to the mock service.
 */
void rulefunction RuleFunctions.Preprocessors.onClientRequest {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.ClientRequest evt;
	}
	body {
		Object logger = Log.getLogger("RuleFunctions.Preprocessors.onClientRequest");
		Log.log(logger, "info", "Received client request: %s", evt.message);

		// create a new collector to handle new client request
		String extId = String.format("CR-%d", System.nanoTime());
		Log.log(logger, "info", "Create handler '%s'", extId);

		Concepts.Handler h = Instance.newInstance("/Concepts/Handler", extId);
		h.request = evt.message;
		h.requestTime = evt.requestTime;
		h.receiptTime = System.currentTimeMillis();
		h.status = "";
		
		// check pre-tests
		boolean isPreTest = false;
		long maxPreTest = System.getGlobalVariableAsLong("Agent/PreTests", 0);
		if (maxPreTest > 0) {
			long preCount = Stats.getPreTestCount();
			Stats.addPreTests(1L);
			long testCount = Stats.getPreTestCount();
			Log.log(logger, "info", "Total test count %d", testCount);
			if (preCount < maxPreTest) {
				if (testCount >= maxPreTest) {
					// initialize all stats after pre-tests
					Stats.resetStats(0L);
				} else {
					isPreTest = true;
				}
			}
		}

		// update performance stats if engine is configured for PrintStats
		int printStats = System.getGlobalVariableAsInt("Agent/PrintStats", 0);
		if (printStats > 0) {
			// initialize stats after long idle time
			long maxIdleTime = System.getGlobalVariableAsLong("Agent/StatsIdleTime", 0);
			Log.log(logger, "debug", "Check idle time: %d < %d - %d", maxIdleTime, System.currentTimeMillis(), Stats.getLastEventTime());
			if (maxIdleTime > 0) {
				long lastEvent = Stats.getLastEventTime();
				if (lastEvent > 0 && System.currentTimeMillis() > lastEvent + maxIdleTime) {
					// initialize all stats if system has been idle for long period
					Log.log(logger, "info", "Initialize stats for new set of tests");
					Stats.resetStats(0L);
				}
			}
			// update client request stat
			Stats.addStat("ClientRequestDelay", h.receiptTime - h.requestTime);
			Stats.setLastEventTime();
		}
		
		if (isPreTest) {
			// use single response for pre-tests
			h.expectedResponses = 1;
		} else {
			long maxResp = System.getGlobalVariableAsLong("Agent/MaxResponseCount", 1);
			if (maxResp > 1) {
				h.expectedResponses = Math.ceil(Math.random() * maxResp);
			}
			if (h.expectedResponses < 1) {
				h.expectedResponses = 1;
			}
		}

		// set event correlation for sending service request rule from rule
		evt.correlationId = extId;
	}
}