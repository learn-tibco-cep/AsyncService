/**
 * @description upon receipt of client request, create a handler, and send a service request to the mock service.
 */
void rulefunction RuleFunctions.Preprocessors.onClientRequest {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.ClientRequest evt;
	}
	body {
		Object logger = Log.getLogger("RuleFunctions.Preprocessors.onClientRequest");
		Log.log(logger, "info", "Received client request: %s", evt.message);

		// create a new collector to handle new client request
		String extId = String.format("CR-%d", System.nanoTime());
		Log.log(logger, "info", "Create handler '%s'", extId);

		Concepts.Handler h = Instance.newInstance("/Concepts/Handler", extId);
		h.request = evt.message;
		h.requestTime = evt.requestTime;
		h.receiptTime = System.currentTimeMillis();
		h.status = "";
		
		Stats.addStat("ClientRequestDelay", h.receiptTime - h.requestTime);
		
		long preTest = System.getGlobalVariableAsLong("Agent/PreTests", 0);
		
		// check pre-test for stats reset
		long preCount = Stats.getStatCount(Stats.Config.PreTest);
		Stats.addStat(Stats.Config.PreTest, 1L);
		long testCount = Stats.getStatCount(Stats.Config.PreTest);
		Log.log(logger, "info", "Total test count %d", testCount);
		if (preCount < preTest && testCount >= preTest) {
			// initialize all stats after pre-tests
			Stats.resetStats(0L);
		}
		
		if (testCount < preTest) {
			// use single response for pre-tests
			h.expectedResponses = 1;
		} else {
			long maxResp = System.getGlobalVariableAsLong("Agent/MaxResponseCount", 1);
			if (maxResp > 1) {
				h.expectedResponses = Math.ceil(Math.random() * maxResp);
			}
			if (h.expectedResponses < 1) {
				h.expectedResponses = 1;
			}
		}

		// set event correlation for sending service request rule from rule
		evt.correlationId = extId;
	}
}