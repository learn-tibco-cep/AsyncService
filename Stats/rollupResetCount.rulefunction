/**
 * @description thread-safe increment of a stat count
 */
void rulefunction Stats.rollupResetCount {
	attribute {
		validity = ACTION;
	}
	scope {
		Object repo;
		String name;
		long count;
	}
	body {
		Object logger = Log.getLogger("Stats.rollupResetCount");
		boolean done = false;
		while (!done) {
			Object cMap = Collections.Map.get(repo, Stats.Config.LastReset);
			try {
				Object c = Collections.Map.get(cMap, name);
				long v = c;  // convert count to long type
				done = Collections.Map.Concurrent.replaceIfEqualToGivenValue(cMap, name, c, v + count);
			} catch (Exception e) {
				Log.log(logger, "warn", "Dropped name: %s, count: %d due to exception: %s", name, count, e@message);
				break;
			}
		}
	}
}