/**
 * @description Mock service to send ServiceResponse messages.
 */
void rulefunction TestMock.onServiceRequest {
	attribute {
		validity = ACTION;
	}
	scope {
		Events.ServiceRequest req;
	}
	body {
		Object logger = Log.getLogger("TestMock.onServiceRequest");
		Log.log(logger, "info", "Mock service receives request '%s'", req.correlationId);

		// generate response messages
		int size = req.expectedResponses;
		if (size < 1) {
			size = 1;
		}
		long recTm = System.currentTimeMillis();
		int bufferSize = System.getGlobalVariableAsInt("Mock/BufferSize", 0);
		
		for (int i = 1; i <= size; i++) {
			if (i > 1) {
				if (bufferSize > 0) {
					// buffer initial set of requests for delayed processing to avoid initial system slowdown
					Object buff = Collections.Map.getMap("BUFFER");
					if (Collections.Map.size(buff) < bufferSize) {
						// add request to buffer for batched response
						Log.log(logger, "info", "Buffer %d responses for '%s'", size - 1, req.correlationId);
						String v = String.format("%d:%d:%s", req.expectedResponses, recTm, req.message);
						Collections.Map.Concurrent.putIfAbsent(buff, req.correlationId, v);
						int buffered = Collections.Map.size(buff);
						Log.log(logger, "info", "%d of %d requests in buffer", buffered, bufferSize);
						if (buffered == bufferSize) {
							TestMock.dispatchBuffer();
						}
						return;
					}
				}
				
				// add random delay to reduce chance of lock contention
				long delay = TestMock.randomDelay();
				if (delay > 0) {
					Log.log(logger, "info", "Delay response %d for '%s' by %d ms", i, req.correlationId, delay);
					Engine.sleep(delay);
				}
			}
			Events.ServiceResponse resp = Events.ServiceResponse.ServiceResponse(
				null /*extId String */,
				null /*payload String */,
				req.correlationId /*correlationId String */,
				String.format("response %d for [%s]", i, req.message) /*response String */,
				recTm /*receiptTime long */,
				System.currentTimeMillis() /*responseTime long */);

			Event.sendEvent(resp);
		}
		Log.log(logger, "info", "Mock service sent %d responses for '%s'", size, req.correlationId);
	}
}