/**
 * @description 
 */
void rulefunction TestMock.onBufferedRequest {
	attribute {
		validity = ACTION;
	}
	scope {
		TestMock.BufferedRequest req;
	}
	body {
		Object logger = Log.getLogger("TestMock.onBufferedRequest");
		
		// parse buffered request of format size:time:message
		String[] tokens = String.split(req.request, ":");
		int size = Number.intValue(tokens[0], 10);
		long recTm = Number.longValue(tokens[1], 10);
		
		// send specified number of responses (only for responses 2 and above)
		for (int i = 1; i < size; i++) {
			// add random delay to reduce chance of lock contention
			long delay = TestMock.randomDelay();
			if (delay > 0) {
				Log.log(logger, "info", "Delay response %d for '%s' by %d ms", i+1, req.correlationId, delay);
				Engine.sleep(delay);
			}
			
			// send response i+1
			Events.ServiceResponse resp = Events.ServiceResponse.ServiceResponse(
				null /*extId String */,
				null /*payload String */,
				req.correlationId /*correlationId String */,
				String.format("response %d for [%s]", i+1, tokens[2]) /*response String */,
				recTm /*receiptTime long */,
				System.currentTimeMillis() /*responseTime long */);
			Event.sendEvent(resp);
		}
		Log.log(logger, "info", "Mock service sent %d responses for '%s'", size, req.correlationId);
	}
}